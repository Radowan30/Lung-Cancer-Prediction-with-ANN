1st try accuracy= 0.8461538461538461
[params:

model = Sequential()
model.add(Dense(units=16, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=8, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))
optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'] 
batch_size=100, epochs=50]


2nd try accuracy = 0.8974358974358975

[params:

model = Sequential()
model.add(Dense(units=16, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=16, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))

batch_size=20, epochs=50, verbose=2]


3rd try accuracy = 0.8589743589743589

[params:

model = Sequential()
model.add(Dense(units=32, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=16, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))

batch_size=20, epochs=50, verbose=2]



4th try accuracy = 0.9102564102564102  [best]

[params:

model = Sequential()
model.add(Dense(units=32, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=32, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))

batch_size=20, epochs=50, verbose=2]



5th try accuracy = 0.9102564102564102  [best]

[params:

model = Sequential()
model.add(Dense(units=32, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=32, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=32, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=2, activation='softmax'))

batch_size=20, epochs=50, verbose=2]



6th try accuracy = 0.8846153846153846

[params:

model = Sequential()
model.add(Dense(units=32, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=32, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=16, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=2, activation='softmax'))

batch_size=20, epochs=50, verbose=2]



7th try accuracy = 0.9102564102564102

[params:

model = Sequential()
model.add(Dense(units=64, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=64, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=2, activation='softmax'))

batch_size=20, epochs=50, verbose=2]





8th try accuracy = 0.8846153846153846

[params:

model = Sequential()
model.add(Dense(units=32, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=32, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))

batch_size=32, epochs=50, verbose=2]



9th try accuracy = 0.8974358974358975

[params:

model = Sequential()
model.add(Dense(units=32, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=32, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))

batch_size=10, epochs=50, verbose=2]



10th try accuracy = 0.9230769230769231 

[params:

model = Sequential()
model.add(Dense(units=32, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=32, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))

batch_size=15, epochs=50, verbose=2]




11th try accuracy = 0.9358974358974359 

[params:

model = Sequential()
model.add(Dense(units=32, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=32, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))

batch_size=13, epochs=80, verbose=2]




12th try accuracy = 0.9487179487179487  [best]

[params:

model = Sequential()
model.add(Dense(units=32, activation='relu', input_shape=(x_train.shape[1],)))
model.add(Dense(units=32, activation='relu')) #try with model.add(Dropout(0.2))
model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

batch_size=15, epochs=100, verbose=2]




Binary method

1st try accuracy = 0.9354838728904724

[param:

model = Sequential()
model.add(Dense(units=16, input_dim=x_train.shape[1], activation='relu'))
model.add(Dense(units=8, activation='relu'))
model.add(Dense(units=1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, batch_size=10, epochs=100, verbose=2)
]



2nd try accuracy = 0.9516128897666931

[param:

model = Sequential()
model.add(Dense(units=16, input_dim=x_train.shape[1], activation='relu'))
model.add(Dense(units=16, activation='relu'))
model.add(Dense(units=1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, batch_size=10, epochs=100, verbose=2)
]



3rd try accuracy = 0.9677419066429138  [Best]

[param:

model = Sequential()
model.add(Dense(units=16, input_dim=x_train.shape[1], activation='relu'))
model.add(Dense(units=16, activation='relu'))
model.add(Dense(units=1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, batch_size=32, epochs=100, verbose=2)
]



